
data Bool where
  True :: Bool
  False :: Bool

data Nat where
  Zero :: Nat
  Suc :: Nat -> Nat

data List :: * -> * where
  Nil :: forall a. List a
  Cons :: forall a. a -> List a -> List a

data Vec :: Num -> * -> * where
  VNil :: forall a. Vec 0 a
  VCons :: forall (n :: Num) a . a -> Vec n a -> Vec (n+1) a

data UNat :: Num -> * where
  UZero :: UNat 0
  USuc :: forall (n :: Num). UNat n -> UNat (n+1)



vhead :: forall (n :: Num) a. Vec (n+1) a -> a
vhead (VCons x xs) = x

vtail :: forall (n :: Num) a. Vec (n+1) a -> Vec n a
vtail (VCons x xs) = xs

{-
vappend :: forall (m n :: Num) a . Vec m a -> Vec n a -> Vec (m+n) a
vappend VNil ys = ys
vappend (VCons x xs) ys = VCons x (vappend xs ys)


vrevapp :: forall (m n :: Num) a . Vec m a -> Vec n a -> Vec (m+n) a
vrevapp VNil ys = ys
vrevapp (VCons x xs) ys = vrevapp xs (VCons x ys)

vec :: forall (n :: Num) a. UNat n -> a -> Vec n a
vec UZero    a = VNil
vec (USuc m) a = VCons a (vec m a)
-}

wrong :: forall a. a
wrong = vhead VNil